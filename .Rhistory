inflowData2 <- inflowData2[order(inflowData2$FQ),]
inflowData2$actualHits <- inflowData2$hits - inflowData2$totalEvents
inflowData2$actualHits_MA <- rollapply(inflowData2$actualHits, 3, mean, na.rm=TRUE, fill =NA, align= "right")
ccf(inflowData2$actualHits_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
inflowData2 <- inflowData2[-1,]
inflowData2 <- inflowData2[-1,]
ccf(inflowData2$actualHits_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv")
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv", x= gaData2)
View(gaDataDaily)
knitr::opts_chunk$set(echo = TRUE)
library(zoo)
library(DataCombine)
library(car)
library(caret)
#Read gaDataDaily file for this analysis
gaBounce <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, secondPagePath == "(not set)"))
gaBounce$totalSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath != "(not set)"))$sessions
gaBounce$eventSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath == "(not set)"))$sessions
names(gaBounce)[1] <- "Year"
names(gaBounce)[2] <- "Month"
names(gaBounce)[3] <- "bouncedSessions"
gaBounce$bounceRate <- (gaBounce$bouncedSessions - gaBounce$eventSessions)/gaBounce$totalSessions
#Merge with inflow data to test correlation
#Read inflowData file inflowdata <- read.csv("inflowData.csv")
inflowData <- merge(inflowData, gaBounce[c(1,2,6)], by = c("Year", "Month"))
inflowData$bounceRate_MA <- rollapply(inflowData$bounceRate, 3, mean, na.rm=TRUE, fill =NA, align= "right")
View(inflowData)
View(inflowData2)
View(gaBounce)
View(inflowData)
#Read gaDataDaily file for this analysis
gaBounce <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, secondPagePath == "(not set)"))
gaBounce$totalSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath != "(not set)"))$sessions
gaBounce$eventSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath == "(not set)"))$sessions
names(gaBounce)[1] <- "Year"
names(gaBounce)[2] <- "Month"
names(gaBounce)[3] <- "bouncedSessions"
gaBounce$bounceRate <- (gaBounce$bouncedSessions - gaBounce$eventSessions)/gaBounce$totalSessions
#Merge with inflow data to test correlation
#Read inflowData file
inflowData <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData <- merge(inflowData, gaBounce[c(1,2,6)], by = c("Year", "Month"))
inflowData$bounceRate_MA <- rollapply(inflowData$bounceRate, 3, mean, na.rm=TRUE, fill =NA, align= "right")
ccf(inflowData$bounceRate_MA, inflowData$Monthly_Inflow_MS, na.action=na.pass)
gaBounce2 <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, (secondPagePath == "(not set)" | (secondPagePath == landingPagePath & landingPagePath == exitPagePath))))
gaBounce2$totalSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath != "(not set)"))$sessions
gaBounce2$eventSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath == "(not set)"))$sessions
names(gaBounce2)[1] <- "Year"
names(gaBounce2)[2] <- "Month"
names(gaBounce2)[3] <- "bouncedSessions"
gaBounce2$bounceRate2 <- (gaBounce2$bouncedSessions - gaBounce2$eventSessions)/gaBounce2$totalSessions
inflowData <- merge(inflowData, gaBounce2[c(1,2,6)], by = c("Year", "Month"))
inflowData$bounceRate2_MA <- rollapply(inflowData$bounceRate2, 3, mean, na.rm=TRUE, fill =NA, align= "right")
ccf(inflowData$bounceRate_MA, inflowData$Monthly_Inflow_MS, na.action=na.pass)
#read the gaData file gaData2 <- read.csv("gaData2.csv)
names(gaData2)[1] <- "Year"
names(gaData2)[2] <- "Month"
inflowData2 <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData2 <- merge(inflowData2, gaData2, by = c("Year", "Month"))
inflowData2 <- inflowData2[order(inflowData2$FQ),]
inflowData2$percentNewSessions_MA <- rollapply(inflowData2$percentNewSessions, 3, mean, na.rm=TRUE, fill =NA, align= "right")
inflowData2$hits_MA <- rollapply(inflowData2$hits, 3, mean, na.rm=TRUE, fill =NA, align= "right")
inflowData2 <- inflowData2[!is.na(inflowData2$Monthly_Inflow_MS),]
#remove first two observations
inflowData2 <- inflowData2[-1,]
inflowData2 <- inflowData2[-1,]
ccf(inflowData2$percentNewSessions_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
ccf(inflowData2$hits_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
ccf(inflowData2$hits_MA, inflowData2$percentNewSessions_MA, na.action=na.pass)
fit4 <- lm(Monthly_Inflow_MS ~ IDC_Rev_M_MA_9 + PTB_MA_7 + percentNewSessions_MA + log(hits_MA), inflowData2)
summary(fit4)
#Model Evaluation
anova(fit4)
library(car)
vif(fit4)
library(plotmo)
plotmo(fit4)
inflow_training <- inflowData2[!(inflowData2$FQ=="2018Q2"|inflowData2$FQ=="2018Q3"),]
inflow_testing <- inflowData2[(inflowData2$FQ=="2018Q2"|inflowData2$FQ=="2018Q3"),]
fit5 <- lm(Monthly_Inflow_MS ~ IDC_Rev_M_MA_9 + PTB_MA_7 + percentNewSessions_MA + hits_MA, inflow_training)
summary(fit5)
inflow_testing$pred <- predict(fit5, inflow_testing)
inflow_testing$err <- ((inflow_testing$pred - inflow_testing$Monthly_Inflow_MS)/inflow_testing$Monthly_Inflow_MS)*100
mean(abs(inflow_testing$err)) #mape
#Read gaDataDaily file for this analysis
gaBounce <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, secondPagePath == "(not set)"))
gaBounce$totalSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath != "(not set)"))$sessions
gaBounce$eventSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath == "(not set)"))$sessions
names(gaBounce)[1] <- "Year"
names(gaBounce)[2] <- "Month"
names(gaBounce)[3] <- "bouncedSessions"
gaBounce$bounceRate <- (gaBounce$bouncedSessions - gaBounce$eventSessions)/gaBounce$totalSessions
#Merge with inflow data to test correlation
#Read inflowData file
inflowData <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData <- merge(inflowData, gaBounce[c(1,2,6)], by = c("Year", "Month"))
inflowData$bounceRate_MA <- rollapply(inflowData$bounceRate, 3, mean, na.rm=TRUE, fill =NA, align= "right")
ccf(inflowData$bounceRate_MA, inflowData$Monthly_Inflow_MS, na.action=na.pass)
write.file("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaDataDailyExtract.csv", x = gaDataDaily)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaDataDailyExtract.csv", x = gaDataDaily)
#Read gaDataDaily file for this analysis
gaDataDaily <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaDataDailyExtract.csv")
gaBounce <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, secondPagePath == "(not set)"))
gaBounce$totalSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath != "(not set)"))$sessions
gaBounce$eventSessions <- aggregate( sessions~ year + month, sum, data = subset(gaDataDaily, landingPagePath == "(not set)"))$sessions
names(gaBounce)[1] <- "Year"
names(gaBounce)[2] <- "Month"
names(gaBounce)[3] <- "bouncedSessions"
gaBounce$bounceRate <- (gaBounce$bouncedSessions - gaBounce$eventSessions)/gaBounce$totalSessions
#Merge with inflow data to test correlation
#Read inflowData file
inflowData <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData <- merge(inflowData, gaBounce[c(1,2,6)], by = c("Year", "Month"))
inflowData$bounceRate_MA <- rollapply(inflowData$bounceRate, 3, mean, na.rm=TRUE, fill =NA, align= "right")
ccf(inflowData$bounceRate_MA, inflowData$Monthly_Inflow_MS, na.action=na.pass)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv", x = gaData2)
#read the gaData file gaData2 <- read.csv("gaData2.csv)
gaData2<- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv")
names(gaData2)[1] <- "Year"
names(gaData2)[2] <- "Month"
inflowData2 <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData2 <- merge(inflowData2, gaData2, by = c("Year", "Month"))
View(inflowData2)
View(gaData2)
#read the gaData file gaData2 <- read.csv("gaData2.csv)
gaData2<- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv")
names(gaData2)[1] <- "Year"
names(gaData2)[2] <- "Month"
inflowData2 <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData2 <- merge(inflowData2, gaData2, by = c("Year", "Month"))
#read the gaData file
gaData2<- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv")
names(gaData2)[1] <- "Year"
names(gaData2)[2] <- "Month"
inflowData2 <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData2 <- merge(inflowData2, gaData2, by = c("Year", "Month"))
View(gaData2)
#read the gaData file
gaData2<- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData2.csv")
names(gaData2)[1] <- "Year"
names(gaData2)[2] <- "Month"
inflowData2 <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_FinalTrainingSet_v2.csv")
inflowData2 <- merge(inflowData2, gaData2, by = c("Year", "Month"))
inflowData2 <- inflowData2[order(inflowData2$FQ),]
inflowData2$percentNewSessions_MA <- rollapply(inflowData2$percentNewSessions, 3, mean, na.rm=TRUE, fill =NA, align= "right")
inflowData2$hits_MA <- rollapply(inflowData2$hits, 3, mean, na.rm=TRUE, fill =NA, align= "right")
inflowData2 <- inflowData2[!is.na(inflowData2$Monthly_Inflow_MS),]
#remove first two observations
inflowData2 <- inflowData2[-1,]
inflowData2 <- inflowData2[-1,]
ccf(inflowData2$percentNewSessions_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
ccf(inflowData2$hits_MA, inflowData2$Monthly_Inflow_MS, na.action=na.pass)
ccf(inflowData2$hits_MA, inflowData2$percentNewSessions_MA, na.action=na.pass)
View(gaDataDaily)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaBounce.csv", x= gaBounce)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaBounce2.csv", x= gaBounce2)
library(rga)
library(lubridate)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga", where = "C:/Users/kjoshi/Documents/cv/ML/Finance/model perf/ga.rga")
id <- "4409774"
theDate <- as.Date("2012-02-01")
secondDate <- as.Date("2012-02-29")
endDate <- as.Date("2018-02-01")
gaData2 <- ga$getData(id, start.date = "2012-01-01", end.date="2012-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
gaData2 <- ga$getData(id, start.date = "2018-01-01", end.date="2018-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
gaData2 <- ga$getData(id, start.date = "2017-12-01", end.date="2017-12-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
View(gaData2)
gaData2 <- ga$getData(id, start.date = "2018-01-01", end.date="2018-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
View(gaData2)
View(gaData2)
theDate <- as.Date("2012-02-01")
secondDate <- as.Date("2012-02-29")
endDate <- as.Date("2018-02-01")
gaData2 <- ga$getData(id, start.date = "2012-01-01", end.date="2012-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
while(theDate<endDate){
temp <- ga$getData(id, start.date = theDate, end.date=secondDate, metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*", dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
gaData2<- rbind(gaData2, temp)
print(paste("startDate:", theDate))
print(paste("endDate:", secondDate))
month(theDate) <- month(theDate) + 1
secondDate <- theDate
day(secondDate) <- days_in_month(secondDate)
}
View(gaData2)
path.expand("~")
?pam
install.packages("cluster")
?pam
?cluster
library(cluster)
?pam
renewalsData <- read.csv("C:/Users/kjoshi/Documents/cv/ML/RenewalsDatasets/TrainingSet_v3_withCVU_1.csv")
renewalsData <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Renewals/Datasets/TrainingSet_v3_withCVU_1.csv")
View(renewalsData)
pam(renewalsData[35,],3)
pam(renewalsData[35,],k = 3)
p <- pam(x = renewalsData[35,], k =3)
p <- pam(x = renewalsData[35,], k =2)
p <- pam(x = renewalsData[35,], k =4)
p <- pam(x = renewalsData[35,], k =5)
p <- pam(x = renewalsData[35], k =5)
summary(p)
plot(p)
p$clustering
p <- pam(x = renewalsData[35], k =3)
plot(p)
p <- pam(x = renewalsData[35], k =4)
plot(p)
p <- pam(x = renewalsData[35], k =6)
plot(p)
p <- pam(x = renewalsData[35], k =7)
plot(p)
p <- pam(x = renewalsData[35], k =8)
plot(p)
p <- pam(x = renewalsData[35], k =9)
plot(p)
p <- pam(x = renewalsData[35], k =10)
plot(p)
plot(p)
p <- pam(x = renewalsData[35], k =6)
plot(p)
p$clustering
renewalsData$clustersCVU <- p$clustering
write.csv("C:/Users/kjoshi/Documents/cv/ML/Renewals/Datasets/TrainingSet_v3_withCVU_2.csv", x = renewalsData)
p <- pam(x = renewalsData[35], k =10)
plot(p)
renewalsData$clustersCVU <- p$clustering
write.csv("C:/Users/kjoshi/Documents/cv/ML/Renewals/Datasets/TrainingSet_v3_withCVU_2.csv", x = renewalsData)
p <- pam(x = renewalsData[35], k =11)
plot(p)
k <- kmeans(renewalsData[35], 6)
plot(k)
summary(k)
plot(k$cluster)
plot(k$centers)
clusplot(renewalsData[35], k$cluster, color = TRUE, shade = TRUE, labels = 2, lines= 0)
p <- pam(x = renewalsData[35], k =3)
plot(p)
p <- pam(x = renewalsData[35], k =7)
p <- pam(x = renewalsData[35], k =10)
plot(p)
plot(p, ask = FALSE)
inflow_train <- read.csv("C:/Users\kjoshi/Documents/cv/ML/Finance/Data/Inflow_TrainingSet_v5.csv")
inflow_train <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_TrainingSet_v5.csv")
inflow_test <- read.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_Projections_FY2019.csv")
View(inflow_train)
model <- lm(Monthly_Inflow_MS ~ IDC_Rev_M_MA_9 + PTB_MA_7 + Log.Hits. + PercentNewSessions_MA, inflow_train)
summary(model)
inflow_test$predict <- predict(model, inflow_test)
View(inflow_test)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/Inflow_Predictions.csv", x= inflow_test)
install.packages("leaflet")
knitr::opts_chunk$set(echo = TRUE)
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 11.00, lng = 30.00)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 113.0, lng = 11.00)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 29.9012, lng = 81.3124)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lng= 29.9012, lat = 81.3124)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 29.9012, lng = -81.3124)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 29.901243, lng = -81.312431)
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat= 29.901243, lng = -81.312431, popup = 'Oldest City of USA')
my_map
install.packages("rsconnect")
getOption("repos")
View(gaData2)
temp <- log(gaData2$hits)
temp
View(inflowData2)
log(inflowData2$hits_MA)
log(inflowData2$hits, 10)
library(rga)
library(lubridate)
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
rga.open(instance="ga", where = "C:/Users/kjoshi/Documents/cv/ML/Finance/model perf/ga.rga")
id <- "4409774"
theDate <- as.Date("2012-02-01")
secondDate <- as.Date("2012-02-29")
endDate <- as.Date("2018-05-01")
gaData3 <- ga$getData(id, start.date = "2012-01-01", end.date="2012-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
while(theDate<endDate){
temp <- ga$getData(id, start.date = theDate, end.date=secondDate, metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*", dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
gaData3<- rbind(gaData2, temp)
print(paste("startDate:", theDate))
print(paste("endDate:", secondDate))
month(theDate) <- month(theDate) + 1
secondDate <- theDate
day(secondDate) <- days_in_month(secondDate)
}
theDate <- as.Date("2012-02-01")
secondDate <- as.Date("2012-02-29")
endDate <- as.Date("2018-05-01")
gaData3 <- ga$getData(id, start.date = "2012-01-01", end.date="2012-01-31", metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*",  dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
while(theDate<endDate){
temp <- ga$getData(id, start.date = theDate, end.date=secondDate, metrics = "ga:sessions, ga:percentNewSessions, ga:hits, ga:totalEvents", filters = "ga:pagePath!~careers.*", dimensions = "ga:year, ga:month", samplingLevel = "HIGHER_PRECISION", batch= TRUE )
gaData3<- rbind(gaData3, temp)
print(paste("startDate:", theDate))
print(paste("endDate:", secondDate))
month(theDate) <- month(theDate) + 1
secondDate <- theDate
day(secondDate) <- days_in_month(secondDate)
}
View(gaData3)
library(zoo)
library(DataCombine)
library(car)
library(caret)
gaData3$percentNewSessions_MA <- rollapply(gaData3$percentNewSessions, 3, mean, na.rm=TRUE, fill =NA, align= "right")
gaData3$log_hits <- log(gaData3$hits, 10)
View(gaData3)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData_hits_May", x= gaData3)
write.csv("C:/Users/kjoshi/Documents/cv/ML/Finance/Data/gaData_hits_May.csv", x= gaData3)
View(gaDataDaily)
install.packages("plotly")
library(mtcars)
data("mtcars")
library(plotly)
plot_ly(mtcars, x = wt, y= mpg, mode = "markers")
head(mtcars)
?plot_ly
plot_ly(mtcars, x = wt, y= mpg, mode = "markers")
dt <- data(mtcars)
library(plotly)
plot_ly(dt, x = wt, y=mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = wt, y=mpg, mode = "markers")
View(gaData)
plot_ly(gaData, x = Year, y= sessions, mode = "markers")
plot_ly(gaData, x=Year, y= sessions, mode = "markers")
plot_ly(gaData, x=gaData$Year, y= gaData$sessions, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$cyl, y=mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$cyl, y=mtcars$mpg, mode = "markers", trace = "bar")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$cyl, y=mtcars$mpg, mode = "markers", type = "bar")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$cyl, y=mtcars$mpg, type = "bar")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y=mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y= mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x = mtcars$wt, y= mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers")
data(mtcars)
plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", verbose = FALSE)
library(plotly)
plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", verbose = FALSE)
knitr::opts_chunk$set(echo = FALSE)
data(mtcars)
library(plotly)
ggplotly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers")
data(mtcars)
library(plotly)
plot <- ggplotly(mtcars) + geom_point(x=mtcars$wt, y=mtcars$mpg)
data(mtcars)
library(plotly)
plot <- ggplot(mtcars) + geom_point(x=mtcars$wt, y=mtcars$mpg)
ggplotly(plot)
data(mtcars)
library(plotly)
plot <- ggplot(mtcars) + geom_point(aes(mtcars$wt,mtcars$mpg))
ggplotly(plot)
data(mtcars)
library(plotly)
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers")
plot
data(mtcars)
library(plotly)
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter")
plot
knitr::opts_chunk$set(echo = FALSE)
data(mtcars)
library(plotly)
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", xaxis = list(title = "Weight"))
plot
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", layout( title = "Cars Data", xaxis = list(title = "Weight"), yaxis = list(title = "MPG")))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", layout(title = "Cars Data", xaxis = list(title = "Weight"), yaxis = list(title = "MPG")))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", layout(title = 'Cars Data', xaxis = list(title = "Weight"), yaxis = list(title = "MPG")))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", layout(title = 'Cars Data'))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter", layout(xaxis = list(title = "Weight"), yaxis = list(title = "MPG")))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter") %>%
layout(xaxis = list(title = "Weight"), yaxis = list(title = "MPG")))
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter") %>%
layout(xaxis = list(title = "Weight"), yaxis = list(title = "MPG"))
plot
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter") %>%
layout(title = 'Cars Data', xaxis = list(title = "Weight"), yaxis = list(title = "MPG"))
plot
plot <- plot_ly(mtcars, x=mtcars$wt, y=mtcars$mpg, mode = "markers", type = "scatter") %>%
layout(title = 'Cars Data', xaxis = list(title = "Weight"), yaxis = list(title = "MPG"))
plot
datasets
data(cars)
cars
data(mtcars)
head(mtcars)
?mtcars
model1 <- lm(am ~ ., mtcars)
model1
summary(model1)
model2 <- lm(am ~ mpg + disp + hp + gear + carb, mtcars)
summary(model2)
model2 <- lm(am ~ mpg + disp + hp + gear, mtcars)
summary(model2)
model2 <- lm(am ~ mpg + disp + gear, mtcars)
summary(model2)
model2 <- glm(am ~ mpg + disp + gear, data = mtcars, family = binomial(link = 'logit'))
summary(model2)
model2 <- glm(am ~ ., data = mtcars, family = binomial(link = 'logit'))
summary(model2)
model2 <- glm(am ~ mpg + cyl + disp + hp + gear + carb, data = mtcars, family = binomial(link = 'logit'))
model2 <- glm(am ~ mpg + cyl + disp + hp + gear, data = mtcars, family = binomial(link = 'logit'))
model2 <- glm(am ~ mpg + disp + hp + gear, data = mtcars, family = binomial(link = 'logit'))
model2 <- glm(am ~ mpg + disp + hp + gear, data = mtcars, family = binomial)
model2 <- glm(am ~ mpg + disp + hp, data = mtcars, family = binomial)
summary(model2)
data("Titanic")
head(Titanic)
Titanic
head(mtcars)
model1 <- lm( mpg ~ ., mtcars)
summary(model1)
model1 <- lm( mpg ~ cyl + disp + hp + wt + am + gear + carb, mtcars)
summary(model1)
shiny::runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
View(mtcars)
model1 <- lm( mpg ~ cyl + hp + wt + am, mtcars)
summary(model1)
model1 <- lm( mpg ~ cyl + hp + wt + am + gear, mtcars)
summary(model1)
model1 <- lm( mpg ~ cyl + hp + wt + am, mtcars)
summary(model1)
model1 <- lm( mpg ~ cyl + hp + wt, mtcars)
summary(model1)
model1 <- lm( mpg ~ cyl + hp + wt + am, mtcars)
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
runApp('F:/cv/ML/Data Science Course/Data Product/DataProductApp')
library(slidify)
slidify(index.Rmd)
slidify("index.Rmd")
slidify("F:/cv/ML/Data Science Course/Data Product/index.Rmd")
publish(user = 'karan-joshi', repo = 'DataProductApp')
author("DataProductDeck")
slidify("index.Rmd")
publish(user = 'karan-joshi', repo = 'DataProductApp')
